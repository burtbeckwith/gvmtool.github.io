{"body":"# GVM the Groovy enVironment Manager\r\n\r\nGVM is a tool for managing parallel Versions of multiple Software Development Kits on most Unix based systems. It provides a convenient command line interface for installing, switching, removing and listing Candidates.\r\n\r\nGVM was inspired by the highly useful [RVM](https://rvm.io) and [rbenv](https://github.com/sstephenson/rbenv) tools, used at large by the Ruby community.\r\n\r\nCandidates that are currently supported are:\r\n\r\n*   Groovy\r\n*   Grails\r\n*   Griffon\r\n*   Gradle\r\n*   vert.x\r\n\r\nThis list will grow beyond Groovy candidates.\r\n\r\nIt runs on the following platforms:\r\n\r\n*   Linux\r\n*   Mac OSX\r\n*   Cygwin\r\n*   Solaris\r\n*   FreeBSD (with bash installed)\r\n\r\nGVM is written in [bash](http://www.gnu.org/software/bash) and only depends on [curl](http://curl.haxx.se/) and [unzip](http://www.info-zip.org/) to be available on your system. The installer will check for these before completing the installation process. It will then create a `.gvm/` folder in your home directory, and neatly install all candidates beneath it.\r\n\r\nGVM also has a server-side component written with [vertx](http://vertx.io) for dynamic behaviour. Further it uses [MongoDB](http://www.mongodb.org/) for keeping track of Candidate Versions and persisting some usage statistics. As a result, newly released Candidate Versions can be added to GVM without the need for local re-installation.\r\n\r\nIt also facilitates easy installation and a selfupdate feature to upgrade client-side components. It even sports a facility for live broadcast notifications.\r\n\r\n## Installation\r\n\r\nOpen your favourite bash terminal and enter the following:\r\n\r\n    curl -s get.gvmtool.net | bash\r\n\r\nIf the environment needs tweaking for GVM to be installed, the installer will prompt you accordingly and ask you to restart.\r\n\r\n## Usage\r\n\r\nAfter installation, you will need to run the code snippet that the installer prompts you to. Alternatively you could open a new terminal. Next, run the following:\r\n\r\n    $ gvm help\r\n\r\nIf GVM was installed correctly, you should see some basic help information:\r\n\r\n    Usage: gvm <command> <candidate> [version]\r\n    \r\n       command    :  install, uninstall, list, use, current, version, selfupdate, broadcast or help\r\n       candidate  :  groovy, grails, griffon, gradle, vert.x\r\n       version    :  optional, defaults to latest stable if not provided\r\n    \r\n    eg: gvm install groovy\r\n\r\n\r\n### Install Command\r\n\r\nInstall the current default grails version by simply typing:\r\n\r\n    $ gvm install grails\r\n\r\nYou will be prompted if you want this version to be set as default. Answering yes will ensure that all shells opened will have this version immediately in use.\r\n\r\nAfter installation completes, install another version:\r\n\r\n    $ gvm install grails 1.3.9\r\n\r\nThis will install a parallel version of Grails, allowing you to switch between them easily.\r\n\r\nIt is even possible to add a locally installed development snapshot/version to GVM. This is done by using the install command as follows:\r\n\r\n    $ gvm install grails 3.0-SNAPSHOT /home/dude/git/grails\r\n\r\nThis variant of `install` can only be executed if the __specified version is not know__. Otherwise the path provided will be ignored and the correct version will be downloaded instead.\r\n\r\n### Use Command\r\n\r\nChoose to use a given version:\r\n\r\n    $ gvm use grails 2.1.1\r\n\r\nIt is important to realise that this will switch the candidate version for the current shell only. To make this change permanent, use the `default` command instead.\r\n\r\n\r\n### Default Command\r\n\r\nChose to make a given version the default:\r\n\r\n    $ gvm default grails 1.3.9\r\n\r\nThis will ensure that all subsequent shells will start with version 1.3.9 in use.\r\n\r\n\r\n### Current Command\r\n\r\nTo see what is currently in use for a Candidate:\r\n\r\n    $ gvm current grails\r\n      Using grails version 2.2.0\r\n\r\nTo see what is currently in use for _all_ candidates:\r\n\r\n    $ gvm current\r\n      Using:\r\n      groovy: 2.1.0\r\n      grails: 2.2.0\r\n      griffon: 1.2.0\r\n      gradle: 1.3\r\n      vertx: 1.3.1.final\r\n\r\n\r\n### List Command\r\n\r\nTo get a listing of what is available, installed and selected:\r\n\r\n    $ gvm list gradle\r\n\r\nThis command will also indicate any locally installed dev versions that you might have added to GVM.\r\n\r\n### Uninstall Command\r\n\r\nTo remove the versions you aren't using anymore:\r\n\r\n    $ gvm uninstall grails 1.3.9\r\n\r\n\r\n### Broadcast Command\r\n\r\nYou can also view the latest broadcast message:\r\n\r\n    $ gvm broadcast\r\n\r\nIf you are being nagged about an outdated GVM version:\r\n\r\n    $ gvm selfupdate\r\n\r\n\r\n### Version Command\r\n\r\nTo easily see what version of GVM you currently have installed:\r\n\r\n    $ gvm version\r\n\r\n\r\n### Configurations\r\n\r\nAlthough configuration is very limited at the moment, the list of configurable items will grow as required. Configuration can be found in the `.gvm/etc/config` file. Currently the following is configurable:\r\n\r\n    gvm_auto_answer=false/true    #used to make gvm non-interactive, great for CI environments.\r\n\r\nAnd that's all there is to it!\r\n\r\nEasy peasy pie!","name":"GVM","google":"UA-10247295-11","tagline":"the Groovy enVironment Manager","note":"Don't delete this file! It's used internally to help with page regeneration."}